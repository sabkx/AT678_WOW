#include<set>
#include<map>
#include<cmath>
#include<stack>
#include<queue>
#include<cstdio>
#include<bitset>
#include<string>
#include<vector>
#include<complex>
#include<cstring>
#include<utility>
#include<iostream>
#include<algorithm>
#include<bits/stdc++.h>
#define minsize 15
#define MAXN 10000100
#define MAXN2 10010
#define pi 3.1415926535897932384626433832
#define eps 1e-6
using namespace std;
char font[][66][39]=
{
    {"",
    "...........########",
    ".........############",
    ".......################",
    "......##################",
    ".....####################",
    "....######################",
    "...########################",
    "...##########....##########",
    "..#########........#########",
    "..########..........########",
    ".#########..........#########",
    ".########............########",
    ".########............########",
    ".########............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    ".########............########",
    ".########............########",
    ".########............########",
    ".#########..........#########",
    "..########..........########",
    "..#########........#########",
    "...##########....##########",
    "...########################",
    "....######################",
    ".....####################",
    "......##################",
    ".......################",
    ".........############",
    "...........########"},
 
    {"",
    ".............####",
    "...........#######",
    "........##########",
    ".....#############",
    "..################",
    ".#################",
    ".#################",
    ".#################",
    ".#################",
    "..######..########",
    "..###.....########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    ".##########################",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    ".##########################"},
 
    {"",
    ".........#########",
    "......##############",
    "...###################",
    "..#####################",
    ".#######################",
    ".#######################",
    ".########################",
    ".#########......#########",
    ".#######.........#########",
    ".#######..........########",
    ".#######..........########",
    ".#######..........########",
    ".#######..........########",
    "..######..........########",
    ".................#########",
    ".................########",
    "................#########",
    "...............##########",
    "..............##########",
    ".............###########",
    "............###########",
    "...........###########",
    "..........###########",
    ".........###########",
    "........###########",
    ".......###########",
    "......###########.....#####",
    ".....###########.....#######",
    "....###########......#######",
    "...###########.......#######",
    "..###########........#######",
    ".###########.........#######",
    "############################",
    "############################",
    "############################",
    "############################",
    "############################",
    ".###########################"},
 
    {"",
    ".........##########",
    ".....################",
    "...####################",
    "..######################",
    "..#######################",
    "..########################",
    "..########################",
    "..########.......##########",
    "..#######.........#########",
    "..#######..........########",
    "..#######..........########",
    "...######..........########",
    "...................########",
    "...................########",
    "..................########",
    ".................#########",
    "..........###############",
    ".........###############",
    ".........##############",
    ".........###############",
    ".........################",
    "..........################",
    ".................##########",
    "...................########",
    "...................#########",
    "....................########",
    "....................########",
    "....................########",
    "....................########",
    "...................#########",
    "..###.............##########",
    ".########........##########",
    ".##########################",
    ".#########################",
    "##########################",
    ".########################",
    ".######################",
    "....#################",
    ".......###########"},
 
    {"",
    ".................#####",
    "................#######",
    "...............########",
    "..............#########",
    ".............##########",
    "............###########",
    "............###########",
    "...........############",
    "..........#############",
    ".........##############",
    "........###############",
    ".......################",
    ".......########.#######",
    "......########..#######",
    ".....########...#######",
    "....########....#######",
    "...#########....#######",
    "...########.....#######",
    "..########......#######",
    ".########.......#######",
    "##############################",
    "##############################",
    "##############################",
    "##############################",
    "##############################",
    "##############################",
    "...............########",
    "...............########",
    "...............########",
    "...............########",
    "...............########",
    "...............########",
    ".........####################",
    "........#####################",
    "........#####################",
    "........#####################",
    "........#####################",
    ".........####################"},
 
    {"",
    "...######################",
    "...#######################",
    "...#######################",
    "...#######################",
    "...#######################",
    "...######################",
    "...#######",
    "...#######",
    "...#######",
    "...#######",
    "...#######",
    "...#######",
    "..########..########",
    "..####################",
    "..######################",
    "..#######################",
    "..########################",
    "..########################",
    "..#########################",
    "..########.......##########",
    ".....##...........#########",
    "...................#########",
    "....................########",
    "....................########",
    "....................########",
    "....................########",
    "....................########",
    "....................########",
    "...#...............#########",
    "..####............#########",
    ".########.......###########",
    ".##########################",
    ".#########################",
    "#########################",
    ".#######################",
    "..#####################",
    "....#################",
    "........##########"},
 
    {"",
    "....................######",
    "...............###########",
    "............###############",
    "..........#################",
    "........###################",
    ".......####################",
    "......####################",
    ".....################",
    "....############",
    "...###########",
    "...#########",
    "..#########",
    "..########",
    ".########",
    ".########",
    ".#######....########",
    ".#######..#############",
    "#########################",
    "##########################",
    "###########################",
    "###########################",
    "############......##########",
    "##########.........#########",
    "#########...........#########",
    "########.............########",
    "########.............########",
    "########.............########",
    ".#######.............########",
    ".#######.............########",
    ".########...........#########",
    ".#########.........#########",
    "..##########.....###########",
    "...#########################",
    "...########################",
    "....######################",
    ".....####################",
    "......##################",
    "........##############",
    "...........########"},
 
    {"",
    "###########################",
    "############################",
    "############################",
    "############################",
    "############################",
    "###########################",
    "#######...........#########",
    "#######...........#########",
    "#######..........#########",
    "#######..........#########",
    "#######..........########",
    "#######.........#########",
    "#######.........########",
    "#######........#########",
    ".#####.........#########",
    "...............########",
    "..............#########",
    "..............########",
    ".............#########",
    ".............########",
    "............#########",
    "............#########",
    "............########",
    "...........#########",
    "...........########",
    "..........#########",
    "..........########",
    "..........########",
    ".........########",
    ".........########",
    "........#########",
    "........########",
    "........########",
    ".......########",
    ".......########",
    ".......#######",
    ".......#######",
    ".........#####"},
 
    {"",
    "..........#########",
    "........#############",
    "......#################",
    ".....###################",
    "....#####################",
    "...#######################",
    "...#######################",
    "...#########.....#########",
    "..#########.......#########",
    "..########.........########",
    "..########.........########",
    "..########.........########",
    "..########.........########",
    "..########.........########",
    "...########.......########",
    "...#########.....#########",
    "....#####################",
    ".....###################",
    "......#################",
    "......#################",
    "....#####################",
    "...#######################",
    "..#########......##########",
    ".########..........########",
    ".########..........#########",
    "########............########",
    "########............########",
    "########............########",
    "########............########",
    "#########..........#########",
    "#########..........#########",
    ".##########......##########",
    ".##########################",
    "..########################",
    "..########################",
    "...######################",
    "....####################",
    "......################",
    ".........##########"},
 
    {"",
    ".........#########",
    ".......#############",
    ".....#################",
    "....###################",
    "...#####################",
    "..#######################",
    ".########################",
    ".##########......#########",
    ".#########........#########",
    "#########..........########",
    "########............#######",
    "########............#######",
    "########............########",
    "########............########",
    "########............########",
    "#########..........#########",
    ".########.........##########",
    ".##########......###########",
    "..##########################",
    "..##########################",
    "...#########################",
    "....########################",
    "......############..########",
    "........########....#######",
    "....................#######",
    "...................########",
    "...................########",
    "..................########",
    ".................#########",
    "...............##########",
    ".............############",
    ".........###############",
    "....###################",
    "...###################",
    "...##################",
    "...################",
    "...##############",
    "...############",
    "....######"},
 
    {"",
    "..####",
    ".######",
    "#########",
    "##########",
    "###########",
    "############",
    ".############",
    "...###########",
    "....###########",
    ".....##########",
    "......##########",
    ".......##########",
    "........#########",
    ".........#########",
    "..........########",
    "..........#########",
    "...........########",
    "...........#########",
    "............########",
    "............########",
    "............########",
    "............#########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    "............########",
    "............########",
    "............########",
    "...........#########",
    "...........########",
    "..........#########",
    "..........#########",
    ".........#########",
    "........##########",
    ".......##########",
    ".......#########",
    ".....###########",
    "....###########",
    "...###########",
    "..###########",
    "############",
    "###########",
    "##########",
    "#########",
    ".#######",
    "..####",
    "...#"},
 
    {"",
    "......................####",
    "......................######",
    ".....................#######",
    ".....................#######",
    "....................########",
    "....................#######",
    "...................########",
    "...................#######",
    "..................########",
    "..................#######",
    ".................########",
    ".................#######",
    "................########",
    "................########",
    "................#######",
    "...............########",
    "...............#######",
    "..............########",
    "..............#######",
    ".............########",
    ".............#######",
    "............########",
    "............#######",
    "...........########",
    "...........#######",
    "..........########",
    "..........#######",
    "..........#######",
    ".........########",
    ".........#######",
    "........########",
    "........#######",
    ".......########",
    ".......#######",
    "......########",
    "......#######",
    ".....########",
    ".....#######",
    "....########",
    "....#######",
    "...########",
    "...########",
    "...#######",
    "..########",
    "..#######",
    ".########",
    ".#######",
    "########",
    "#######",
    ".######",
    "..#####"},
 
    {"",
    ".##########################",
    "############################",
    "############################",
    "############################",
    "############################",
    "############################",
    ".###########################"},
 
    {"",
    "...............####",
    "..............######",
    "............########",
    "...........##########",
    "..........###########",
    ".........############",
    "........############",
    ".......###########",
    "......###########",
    ".....###########",
    ".....##########",
    "....##########",
    "....#########",
    "...#########",
    "...########",
    "..#########",
    "..########",
    ".#########",
    ".########",
    ".########",
    ".########",
    "#########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    ".########",
    ".########",
    ".########",
    ".#########",
    "..########",
    "..#########",
    "..#########",
    "...#########",
    "...##########",
    "....#########",
    ".....#########",
    ".....##########",
    "......###########",
    ".......###########",
    "........###########",
    ".........############",
    "..........###########",
    "...........##########",
    "............#########",
    ".............#######",
    "...............####",
    ".................#"},
 
    {"",
    "...........#####",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "...........#####"},
 
    {"",
    "...........####",
    "..........######",
    "..........#######",
    ".........########",
    ".........########",
    "..........#######",
    "..........######",
    ".#####....######.....####",
    ".######...######...#######",
    "#########..#####.#########",
    "###############.##########",
    "##########################",
    "##########################",
    ".########################",
    "......##############",
    ".........########",
    "........###########",
    ".......#############",
    ".....########.#######",
    "....########..########",
    "....########..#########",
    "...########....########",
    "...########....########",
    "....#######.....#######",
    ".....#####......######",
    "......###.........##"}
};
int t,w,b;
struct Image{
    vector<vector<int> > vec;
    int h,w;
    Image(){
        vec.clear();
        h=w;
    }
    Image(int x,int y){
        for(int i=0;i<x;i++){
            vector<int> temp;
            temp.clear();
            for(int j=0;j<y;j++){
                temp.push_back(0);
            }
            vec.push_back(temp);
        }
        h=x;
        w=y;
    }
    Image(vector<string> input){
        vec.clear();
        vector<int> temp;
        for(string str:input){
            for(char i:str){
                if(i=='#'){
                    temp.push_back(1);
                }else{
                    temp.push_back(0);
                }
            }
            vec.push_back(temp);
        }
    }
};
inline void copy(Image &to_be_copied,Image to_copy){
    int x_size=to_copy.vec.size();
    int y_size=to_copy.vec[0].size();
    for(int i=0;i<x_size;i++){
        vector<int> temp;
        for(int j=0;j<y_size;j++){
            temp.push_back(to_copy.vec[i][j]);
        }
        to_be_copied.vec.push_back(temp);
    }
}
inline Image medium_reduce_noise(Image &input){
    //reduce noise
    Image temp=Image();
    copy(temp,input);
    int x=input.vec.size();
    int y=input.vec[0].size();
    int arr[9];
    for(int i=1;i<x-1;i++){
        for(int j=1;j<y-1;j++){
            arr[0]=temp.vec[i][j];
            arr[1]=temp.vec[i-1][j];
            arr[2]=temp.vec[i][j+1];
            arr[3]=temp.vec[i+1][j];
            arr[4]=temp.vec[i][j-1];
            arr[5]=temp.vec[i-1][j-1];
            arr[6]=temp.vec[i+1][j-1];
            arr[7]=temp.vec[i-1][j+1];
            arr[8]=temp.vec[i+1][j+1];
            sort(arr,arr+8);
            temp.vec[i][j]=arr[4]; 
        }
    }
    copy(input,temp);
    return temp;
}
bool vis[75][MAXN2];
int maxx[MAXN2];
int minx[MAXN2];
int maxy[MAXN2];
int miny[MAXN2];
int cnt2=0;
int dx[4]={-1,0,1,0};
int dy[4]={0,1,0,-1};
inline void dfs2(int x,int y,Image im){
    maxx[cnt2]=max(maxx[cnt2],x);
    minx[cnt2]=min(minx[cnt2],x);
    maxy[cnt2]=max(maxy[cnt2],y);
    miny[cnt2]=min(miny[cnt2],y);
    if(vis[x][y]){
        return;
    }
    for(int i=0;i<4;i++){
        int newx=x+dx[i];
        int newy=y+dy[i];
        if(!vis[newx][newy]&&im.vec[newx][newy]==1){
            vis[newx][newy]=true;
            dfs2(newx,newy,im);
        }
    }
}
void dfs(Image im){
    cnt2=0;
    for(int i=0;i<im.vec.size();i++){
        for(int j=0;j<im.vec[0].size();j++){
            if(!vis[i][j]&&im.vec[i][j]==1){
                cnt2++;
                dfs2(i,j,im);
            }
        }
    }
}
vector<Image> split(Image input){
    vector<Image> res;
    dfs(input);
    for(int i=1;i<=cnt2;i++){
        res.push_back(Image(maxx[i]-minx[i],maxy[i]-miny[i]));
    }
    for(int i=0;i<res.size();i++){
        for(int x=minx[i];x<=maxx[i];x++){
            for(int y=miny[i];y<=maxy[i];y++){
                res[i].vec[x-minx[i]][y-miny[i]]=input.vec[x][y];
            }
        }
    }
    return res;
}
Image stretching(Image input,int newx,int newy){
    Image res(newx,newy);
    for(int i=0;i<newx;i++){
        for(int j=0;j<newy;j++){
            res.vec[i][j]=input.vec[input.h*i/newx][input.w*j/newy];
        }
    }
    return split(res)[0];
}
Image distort(Image input,double sx,double sy){
    Image res(input.h*3,input.w*3);
    for(int i=0;i<input.h;i++){
        for(int j=0;j<input.w;j++){
            res.vec[(int)(i+sy*j)+input.h][(int)(j+sx*i)+input.w]=input.vec[i][j];
        }
    }
    return split(res)[0];
}
Image rotate(Image input,double angle){
    if(abs(angle)<=eps){
        return input;
    }
    int newL=max(input.h,input.w);
    angle=angle*pi/180;
    Image res(newL<<2,newL<<2);
    for(int i=1;i<=input.h;i++){
        for(int j=1;j<=input.w;j++){
            if(input.vec[i-1][j-1]){
                double p=atan((double)j/i);
                double delta=p-angle;
                double len=sqrt(i*i+j*j);
                res.vec[(int)(len*cos(delta)+0.4)+(newL<<1)][(int)(len*sin(delta)+0.4)+(newL<<1)]=1;
            }
        }
    }
    return split(res)[0];
}
inline double compare(Image x,Image y){
    if(x.h<0.65*y.h||x.h*0.65>y.h||x.w<0.65*y.w||x.w*0.65>y.w){
        return 0;
    }
    x=stretching(x,y.h,y.w);
    int cntsame=0;
    for(int i=0;i<y.h;i++){
        for(int j=0;j<y.w;j++){
            cntsame+=(x.vec[i][j]==y.vec[i][j]);
        }
    }
    return (cntsame/(y.h*y.w));
}
vector<char> expr;
inline double match(int x,Image img){
    double res=0;
    for(int i=0;i<41;i++){
        res=max(res,compare(font[x][i],img));
    }
    return res;
}
void work(){
    // memset(head,0,sizeof(head));
    // memset(e,0,sizeof(e));
    // memset(color,0,sizeof(color));
    // cnt=cnt2=0;
    vector<string> vec;
    string str;
    for(int i=1;i<=b;i++){
        cin>>str;
        vec.push_back(str);
        // cout<<str<<"\n";
    }
    Image im(vec);
    vector<Image> splitted=split(im);

}
int main(){
    freopen("AT678_input.txt","r",stdin);
    scanf("%d%d%d",&t,&w,&b);
    work();
    return 0;
}