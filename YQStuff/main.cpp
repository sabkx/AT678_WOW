#include<bits/stdc++.h>
#include<algorithm>
#include <unistd.h>

#include "CharacterRecognition.h"

char font[][66][39]=
        {
                {"",
                        "...........########",
                        ".........############",
                        ".......################",
                        "......##################",
                        ".....####################",
                        "....######################",
                        "...########################",
                        "...##########....##########",
                        "..#########........#########",
                        "..########..........########",
                        ".#########..........#########",
                        ".########............########",
                        ".########............########",
                        ".########............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        "########..............########",
                        ".########............########",
                        ".########............########",
                        ".########............########",
                        ".#########..........#########",
                        "..########..........########",
                        "..#########........#########",
                        "...##########....##########",
                        "...########################",
                        "....######################",
                        ".....####################",
                        "......##################",
                        ".......################",
                        ".........############",
                        "...........########"},

                {"",
                        ".............####",
                        "...........#######",
                        "........##########",
                        ".....#############",
                        "..################",
                        ".#################",
                        ".#################",
                        ".#################",
                        ".#################",
                        "..######..########",
                        "..###.....########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        "..........########",
                        ".##########################",
                        "###########################",
                        "###########################",
                        "###########################",
                        "###########################",
                        ".##########################"},

                {"",
                        ".........#########",
                        "......##############",
                        "...###################",
                        "..#####################",
                        ".#######################",
                        ".#######################",
                        ".########################",
                        ".#########......#########",
                        ".#######.........#########",
                        ".#######..........########",
                        ".#######..........########",
                        ".#######..........########",
                        ".#######..........########",
                        "..######..........########",
                        ".................#########",
                        ".................########",
                        "................#########",
                        "...............##########",
                        "..............##########",
                        ".............###########",
                        "............###########",
                        "...........###########",
                        "..........###########",
                        ".........###########",
                        "........###########",
                        ".......###########",
                        "......###########.....#####",
                        ".....###########.....#######",
                        "....###########......#######",
                        "...###########.......#######",
                        "..###########........#######",
                        ".###########.........#######",
                        "############################",
                        "############################",
                        "############################",
                        "############################",
                        "############################",
                        ".###########################"},

                {"",
                        ".........##########",
                        ".....################",
                        "...####################",
                        "..######################",
                        "..#######################",
                        "..########################",
                        "..########################",
                        "..########.......##########",
                        "..#######.........#########",
                        "..#######..........########",
                        "..#######..........########",
                        "...######..........########",
                        "...................########",
                        "...................########",
                        "..................########",
                        ".................#########",
                        "..........###############",
                        ".........###############",
                        ".........##############",
                        ".........###############",
                        ".........################",
                        "..........################",
                        ".................##########",
                        "...................########",
                        "...................#########",
                        "....................########",
                        "....................########",
                        "....................########",
                        "....................########",
                        "...................#########",
                        "..###.............##########",
                        ".########........##########",
                        ".##########################",
                        ".#########################",
                        "##########################",
                        ".########################",
                        ".######################",
                        "....#################",
                        ".......###########"},

                {"",
                        ".................#####",
                        "................#######",
                        "...............########",
                        "..............#########",
                        ".............##########",
                        "............###########",
                        "............###########",
                        "...........############",
                        "..........#############",
                        ".........##############",
                        "........###############",
                        ".......################",
                        ".......########.#######",
                        "......########..#######",
                        ".....########...#######",
                        "....########....#######",
                        "...#########....#######",
                        "...########.....#######",
                        "..########......#######",
                        ".########.......#######",
                        "##############################",
                        "##############################",
                        "##############################",
                        "##############################",
                        "##############################",
                        "##############################",
                        "...............########",
                        "...............########",
                        "...............########",
                        "...............########",
                        "...............########",
                        "...............########",
                        ".........####################",
                        "........#####################",
                        "........#####################",
                        "........#####################",
                        "........#####################",
                        ".........####################"},

                {"",
                        "...######################",
                        "...#######################",
                        "...#######################",
                        "...#######################",
                        "...#######################",
                        "...######################",
                        "...#######",
                        "...#######",
                        "...#######",
                        "...#######",
                        "...#######",
                        "...#######",
                        "..########..########",
                        "..####################",
                        "..######################",
                        "..#######################",
                        "..########################",
                        "..########################",
                        "..#########################",
                        "..########.......##########",
                        ".....##...........#########",
                        "...................#########",
                        "....................########",
                        "....................########",
                        "....................########",
                        "....................########",
                        "....................########",
                        "....................########",
                        "...#...............#########",
                        "..####............#########",
                        ".########.......###########",
                        ".##########################",
                        ".#########################",
                        "#########################",
                        ".#######################",
                        "..#####################",
                        "....#################",
                        "........##########"},

                {"",
                        "....................######",
                        "...............###########",
                        "............###############",
                        "..........#################",
                        "........###################",
                        ".......####################",
                        "......####################",
                        ".....################",
                        "....############",
                        "...###########",
                        "...#########",
                        "..#########",
                        "..########",
                        ".########",
                        ".########",
                        ".#######....########",
                        ".#######..#############",
                        "#########################",
                        "##########################",
                        "###########################",
                        "###########################",
                        "############......##########",
                        "##########.........#########",
                        "#########...........#########",
                        "########.............########",
                        "########.............########",
                        "########.............########",
                        ".#######.............########",
                        ".#######.............########",
                        ".########...........#########",
                        ".#########.........#########",
                        "..##########.....###########",
                        "...#########################",
                        "...########################",
                        "....######################",
                        ".....####################",
                        "......##################",
                        "........##############",
                        "...........########"},

                {"",
                        "###########################",
                        "############################",
                        "############################",
                        "############################",
                        "############################",
                        "###########################",
                        "#######...........#########",
                        "#######...........#########",
                        "#######..........#########",
                        "#######..........#########",
                        "#######..........########",
                        "#######.........#########",
                        "#######.........########",
                        "#######........#########",
                        ".#####.........#########",
                        "...............########",
                        "..............#########",
                        "..............########",
                        ".............#########",
                        ".............########",
                        "............#########",
                        "............#########",
                        "............########",
                        "...........#########",
                        "...........########",
                        "..........#########",
                        "..........########",
                        "..........########",
                        ".........########",
                        ".........########",
                        "........#########",
                        "........########",
                        "........########",
                        ".......########",
                        ".......########",
                        ".......#######",
                        ".......#######",
                        ".........#####"},

                {"",
                        "..........#########",
                        "........#############",
                        "......#################",
                        ".....###################",
                        "....#####################",
                        "...#######################",
                        "...#######################",
                        "...#########.....#########",
                        "..#########.......#########",
                        "..########.........########",
                        "..########.........########",
                        "..########.........########",
                        "..########.........########",
                        "..########.........########",
                        "...########.......########",
                        "...#########.....#########",
                        "....#####################",
                        ".....###################",
                        "......#################",
                        "......#################",
                        "....#####################",
                        "...#######################",
                        "..#########......##########",
                        ".########..........########",
                        ".########..........#########",
                        "########............########",
                        "########............########",
                        "########............########",
                        "########............########",
                        "#########..........#########",
                        "#########..........#########",
                        ".##########......##########",
                        ".##########################",
                        "..########################",
                        "..########################",
                        "...######################",
                        "....####################",
                        "......################",
                        ".........##########"},

                {"",
                        ".........#########",
                        ".......#############",
                        ".....#################",
                        "....###################",
                        "...#####################",
                        "..#######################",
                        ".########################",
                        ".##########......#########",
                        ".#########........#########",
                        "#########..........########",
                        "########............#######",
                        "########............#######",
                        "########............########",
                        "########............########",
                        "########............########",
                        "#########..........#########",
                        ".########.........##########",
                        ".##########......###########",
                        "..##########################",
                        "..##########################",
                        "...#########################",
                        "....########################",
                        "......############..########",
                        "........########....#######",
                        "....................#######",
                        "...................########",
                        "...................########",
                        "..................########",
                        ".................#########",
                        "...............##########",
                        ".............############",
                        ".........###############",
                        "....###################",
                        "...###################",
                        "...##################",
                        "...################",
                        "...##############",
                        "...############",
                        "....######"},

                {"",
                        "..####",
                        ".######",
                        "#########",
                        "##########",
                        "###########",
                        "############",
                        ".############",
                        "...###########",
                        "....###########",
                        ".....##########",
                        "......##########",
                        ".......##########",
                        "........#########",
                        ".........#########",
                        "..........########",
                        "..........#########",
                        "...........########",
                        "...........#########",
                        "............########",
                        "............########",
                        "............########",
                        "............#########",
                        ".............########",
                        ".............########",
                        ".............########",
                        ".............########",
                        ".............########",
                        ".............########",
                        ".............########",
                        ".............########",
                        ".............########",
                        ".............########",
                        "............########",
                        "............########",
                        "............########",
                        "...........#########",
                        "...........########",
                        "..........#########",
                        "..........#########",
                        ".........#########",
                        "........##########",
                        ".......##########",
                        ".......#########",
                        ".....###########",
                        "....###########",
                        "...###########",
                        "..###########",
                        "############",
                        "###########",
                        "##########",
                        "#########",
                        ".#######",
                        "..####",
                        "...#"},

                {"",
                        "......................####",
                        "......................######",
                        ".....................#######",
                        ".....................#######",
                        "....................########",
                        "....................#######",
                        "...................########",
                        "...................#######",
                        "..................########",
                        "..................#######",
                        ".................########",
                        ".................#######",
                        "................########",
                        "................########",
                        "................#######",
                        "...............########",
                        "...............#######",
                        "..............########",
                        "..............#######",
                        ".............########",
                        ".............#######",
                        "............########",
                        "............#######",
                        "...........########",
                        "...........#######",
                        "..........########",
                        "..........#######",
                        "..........#######",
                        ".........########",
                        ".........#######",
                        "........########",
                        "........#######",
                        ".......########",
                        ".......#######",
                        "......########",
                        "......#######",
                        ".....########",
                        ".....#######",
                        "....########",
                        "....#######",
                        "...########",
                        "...########",
                        "...#######",
                        "..########",
                        "..#######",
                        ".########",
                        ".#######",
                        "########",
                        "#######",
                        ".######",
                        "..#####"},

                {"",
                        ".##########################",
                        "############################",
                        "############################",
                        "############################",
                        "############################",
                        "############################",
                        ".###########################"},

                {"",
                        "...............####",
                        "..............######",
                        "............########",
                        "...........##########",
                        "..........###########",
                        ".........############",
                        "........############",
                        ".......###########",
                        "......###########",
                        ".....###########",
                        ".....##########",
                        "....##########",
                        "....#########",
                        "...#########",
                        "...########",
                        "..#########",
                        "..########",
                        ".#########",
                        ".########",
                        ".########",
                        ".########",
                        "#########",
                        "########",
                        "########",
                        "########",
                        "########",
                        "########",
                        "########",
                        "########",
                        "########",
                        "########",
                        "########",
                        ".########",
                        ".########",
                        ".########",
                        ".#########",
                        "..########",
                        "..#########",
                        "..#########",
                        "...#########",
                        "...##########",
                        "....#########",
                        ".....#########",
                        ".....##########",
                        "......###########",
                        ".......###########",
                        "........###########",
                        ".........############",
                        "..........###########",
                        "...........##########",
                        "............#########",
                        ".............#######",
                        "...............####",
                        ".................#"},

                {"",
                        "...........#####",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "###########################",
                        "###########################",
                        "###########################",
                        "###########################",
                        "###########################",
                        "###########################",
                        "###########################",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "..........#######",
                        "...........#####"},

                {"",
                        "...........####",
                        "..........######",
                        "..........#######",
                        ".........########",
                        ".........########",
                        "..........#######",
                        "..........######",
                        ".#####....######.....####",
                        ".######...######...#######",
                        "#########..#####.#########",
                        "###############.##########",
                        "##########################",
                        "##########################",
                        ".########################",
                        "......##############",
                        ".........########",
                        "........###########",
                        ".......#############",
                        ".....########.#######",
                        "....########..########",
                        "....########..#########",
                        "...########....########",
                        "...########....########",
                        "....#######.....#######",
                        ".....#####......######",
                        "......###.........##"}
        };

using namespace std;
const int MAX_HEIGHT = 65, MAX_WIDTH = 10000, CHAR_MIN_SIZE = 100,
        CHAR_IMAGE_HEIGHT = 60, CHAR_IMAGE_WIDTH = 40,
        INF = 0xffffffffffffff;
const double pi = acos(-1);
int vis[MAX_HEIGHT][MAX_WIDTH];
char charRepresentation[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/', '(', ')'};

struct Image{
    int w, h;
    vector<vector<int>> pixels;
    Image(){}
    Image(int h, int w){
        this->h = h;
        this->w = w;
        pixels = vector<vector<int>>(h, vector<int>(w, 0));
        for (int row = 0; row < h; row++){
            for (int col = 0; col < w; col++){
                pixels[row][col] = 0;
            }
        }
    }
    Image(Image const &image){
        h = image.h;
        w = image.w;
        pixels = vector<vector<int>>(h, vector<int>(w));
        for (int row = 0; row < h; row++){
            for (int col = 0; col < w; col++){
                pixels[row][col] = image.pixels[row][col];
            }
        }
    }
    bool inRange(int row, int col){
        if (0 <= row && row < h && 0 <= col && col <= w){
            return true;
        }
        else{
            return false;
        }
    }
};

void initBound(int &xMin, int &xMax, int &yMin, int &yMax, Image image);
Image connectedPixels(int x, int y, Image &image);
Image fontImage[16];
vector<Image> randomisedFontImage[16]; //rotation -> -15~15, interval of 3, cut -> 1,1   -1,1   1,-1   -1,-1   0,0
//11*5 = 55
//*
Image readImg(){
    int w, h;
    scanf("%d %d", &w, &h);
    Image image(h, w);
    for (int row = 0; row < h; row++){
        char str[MAX_WIDTH];
        scanf("%s", &str);
        for (int col = 0; col < w; col++) {
            if (str[col] == '.') image.pixels[row][col] = 0;
            else if (str[col] == '#') image.pixels[row][col] = 1;
        }
    }

    return image;
}

void printImg(Image image){
    for (int row = 0; row < image.h; row++){
//        char str[image.w];
        for (int col = 0; col < image.w; col++){
//            str[col] = image.pixels[row][col] ? '#' : '.';
//            if (image.pixels[row][col] != 1 || image.pixels[row][col] != 0){
//                printf("%d %d %d\n", image.pixels[row][col], row, col);
//                return;
//            }
            printf("%c", image.pixels[row][col] ? '#' : '.');
        }
//        printf("%s\n", str);
        printf("\n");
    }
}

void rmvNoise(Image &image){
    Image tmpImage(image);
    int dx[] = {-1, 0, 1, -1, 0, 1, -1, 0, 1},
            dy[] = {-1, -1, -1, 0, 0, 0, 1, 1, 1};
    for (int row = 0; row < image.h; row++){
        for (int col = 0; col < image.w; col++){

            int cnt = 0, totalCnt = 0;
            for (int i = 0; i < 9; i++){
                int nx = row + dx[i], ny = col + dy[i];
                if (tmpImage.inRange(nx, ny)){
                    totalCnt++;
                    cnt += tmpImage.pixels[nx][ny];
                }
            }
            image.pixels[row][col] = (2*cnt > totalCnt);

        }
    }
}

Image stretchImg(Image image, int tarX, int tarY){
    Image tmp(tarX, tarY);
    for (int row = 0; row < tarX; row++){
        for (int col = 0; col < tarY; col++){
            tmp.pixels[row][col] = image.pixels[row*image.h/tarX][col*image.w/tarY];
        }
    }
    return tmp;
}

Image rotateImg(Image image, double ang){
    vector<pair<int, int>> pointList;
    int xMin = INF, xMax = -INF, yMin = INF, yMax = -INF;
    ang = ang * pi / 180;
    double sinAng = sin(ang), cosAng = cos(ang), xCen = image.h/2., yCen = image.w/2.;

    for (int row = 0; row < image.h; row++) {
        for (int col = 0; col < image.w; col++){
            double nx = (row - xCen) * cosAng + (col - yCen) * sinAng;
            double ny = (col - yCen) * cosAng - (row - xCen) * sinAng;

            int fx = round(xCen + nx), fy = round(yCen + ny);
            pointList.emplace_back(fx, fy);
            xMin = min(xMin, fx), xMax = max(xMax, fx);
            yMin = min(yMin, fy), yMax = max(yMax, fy);
        }
    }

    Image tmp(xMax-xMin+1, yMax-yMin+1);
    for (pair<int, int> point: pointList){
        tmp.pixels[point.first - xMin][point.second - yMin] = 1;
    }
    return tmp;
}

Image cutImg(Image image, double cx, double cy){
    vector<pair<int, int>> pointList;
    int xMin = INF, xMax = -INF, yMin = INF, yMax = -INF;

    for (int row = 0; row < image.h; row++) {
        for (int col = 0; col < image.w; col++){
            double nx = row + col*cy;
            double ny = col + row*cx;

            int fx = round(nx), fy = round(ny);
            pointList.emplace_back(fx, fy);
            xMin = min(xMin, fx), xMax = max(xMax, fx);
            yMin = min(yMin, fy), yMax = max(yMax, fy);
        }
    }

    Image tmp(xMax-xMin+1, yMax-yMin+1);
    for (pair<int, int> point: pointList){
        tmp.pixels[point.first - xMin][point.second - yMin] = 1;
    }
    return tmp;
}

double matchImg(Image image1, Image image2){
    if (min(abs((double)image1.h/image1.w - image2.h/image2.w), abs((double)image1.w/image1.h - image2.w/image2.h)) > 0.25){
        return 0;
    }
    int reCnt = 0, xMin = min(image1.h, image2.h), yMin = min(image1.w, image2.w);
    image1 = stretchImg(image1, xMin, yMin);
    image2 = stretchImg(image2, xMin, yMin);
    for (int row = 0; row < xMin; row++){
        for (int col = 0; col < yMin; col++){
            reCnt += image1.pixels[row][col]==image2.pixels[row][col];
        }
    }
    return (double)reCnt/(xMin*yMin);
}

void readFontImage(){
    for (int charCnt = 0; charCnt < 16; charCnt++){
        Image image(66, 39);
        for (int row = 0; row < 66; row++){
            for (int col = 0; col < 39; col++){
                image.pixels[row][col] = font[charCnt][row][col] == '#' ? 1 : 0;
            }
        }
        fontImage[charCnt] = image;
    }
}

void generateFontImage(){
    for (int charCnt = 0; charCnt < 16; charCnt++){
        for (int r = -15; r < 16; r+=3){
            Image tmp = rotateImg(fontImage[charCnt], r);
            randomisedFontImage[charCnt].push_back(cutImg(tmp, -.1, -.1));
            randomisedFontImage[charCnt].push_back(cutImg(tmp, -.1, .1));
            randomisedFontImage[charCnt].push_back(cutImg(tmp, .1, -.1));
            randomisedFontImage[charCnt].push_back(cutImg(tmp, .1, .1));
            randomisedFontImage[charCnt].push_back(tmp);
        }
        for (int i = 0; i < randomisedFontImage[charCnt].size(); i++){
            rmvNoise(randomisedFontImage[charCnt][i]);
        }
    }
}

char recogniseChar(Image charImage){
    int charNo = 0;
    double max = 0;
    for (int charCnt = 0; charCnt < 16; charCnt++){
        for (int imageCnt = 0; imageCnt < randomisedFontImage[charCnt].size(); imageCnt++){
            if (matchImg(randomisedFontImage[charCnt][imageCnt], charImage) > max){
                max = matchImg(randomisedFontImage[charCnt][imageCnt], charImage);
                charNo = charCnt;
            }
        }
    }
    return charRepresentation[charNo];
}

void initBound(int &xMin, int &xMax, int &yMin, int &yMax, Image image){
    xMin = image.h;
    xMax = 0;
    yMin = image.w;
    yMax = 0;
}

Image connectedPixels(int x, int y, Image &image){
    //queue<pair<int, int>> connected;
    printf("connectedPixels()\n");

    queue<pair<int, int>> unchecked;
    int dx[] = {-1, 0, 0, 1},
            dy[] = {0, -1, 1, 0};
    int xMin, xMax, yMin, yMax;
    initBound(xMin, xMax, yMin, yMax, image);
    //printf("%d %d %d %d\n", xMin, xMax, yMin, yMax);
    //connected.push({x, y});
    unchecked.push({x, y});
    image.pixels[x][y] = 0;
//    xMin = min(xMin, x), xMax = max(xMax, x);
//    yMin = min(yMin, y), yMax = max(yMax, y);
//    printf("%d %d %d %d\n", xMin, xMax, yMin, yMax);
//    image.pixels[x][y] = 0;
    while (!unchecked.empty()){
        pair<int, int> chkPair = unchecked.front();
        unchecked.pop();
        //printf("%d\n", unchecked.empty());
        int xChk = chkPair.first, yChk = chkPair.second;
        xMin = min(xMin, xChk), xMax = max(xMax, xChk);
        yMin = min(yMin, yChk), yMax = max(yMax, yChk);
        vis[xChk][yChk] = 1;
        //printf("(%d, %d) %d %d %d %d\n", xChk, yChk, xMin, xMax, yMin, yMax);

        for (int i = 0; i < 4; i++){
            int nx = xChk + dx[i], ny = yChk + dy[i];
            if (image.inRange(nx, ny) && image.pixels[nx][ny]){
                //printf("in\n");
                //printf("%d\n", connected.size());
                //connected.push({nx, ny});
                unchecked.push({nx, ny});
                image.pixels[nx][ny] = 0;
                //printImg(image);
            }
        }
    }

    printf("here\n\n\n");
    //Image charImage(xMax - xMin + 1, yMax - yMin + 1);
    if ((xMax - xMin + 1) * (yMax - yMin + 1) < 100){
        return Image(0, 0);
    }
    Image charImage(xMax - xMin + 1, yMax - yMin + 1);
//    int startX = (CHAR_IMAGE_HEIGHT - (xMax - xMin + 1)) / 2,
//        startY = (CHAR_IMAGE_WIDTH - (yMax - yMin + 1)) / 2;
    for (int row = 0; row < (xMax - xMin + 1); row++){
        for (int col = 0; col < (yMax - yMin + 1); col++){
            //printf("%d %d ", charImage.pixels[row][col], vis[row + xMin][col + yMin]);
            charImage.pixels[row][col] = vis[row + xMin][col + yMin];
//            charImage.pixels[startX + row][startY + col] = vis[row + xMin][col + yMin];
            vis[row + xMin][col + yMin] = 0;
        }
        //printf("\n");
//        pair<int, int> pair = connected.front();
//        connected.pop();
//        int xChk = pair.first, yChk = pair.second;
//        charImage.pixels[xChk - xMin][yChk - yMin] = 1;
    }
    return charImage;
}

vector<Image> splitExpr(Image &image){
    printf("splitExpr()\n");
    vector<Image> charList;
    for (int col = 0; col < image.w; col++){
        for (int row = 0; row < image.h; row++){
            if (image.pixels[row][col]){
                Image charImage = connectedPixels(row, col, image);
                if (charImage.h * charImage.w >= CHAR_MIN_SIZE){
                    printf("h: %d, w: %d", charImage.h, charImage.w);
                    charList.push_back(charImage);
                    printf("char finished\n\n");
                    //return charList;
                }
            }
        }
    }

    return charList;
}
//*
int main() {
    Image image = readImg();
    rmvNoise(image);
    printImg(image);
    //printf("\n\n\n");

    vector<Image> charList = splitExpr(image);

    for (int i = 0; i < charList.size(); i++) {
        printImg(charList[i]);
        printf("\n\n\n");
    }

    printf("%f\n", pi);
    printf("\n\n\ndone");
    return 0;
}
/**/

/*
int main(){
    Image image = readImg();
    rmvNoise(image);

    vector<Image> charList = splitExpr(image);

    for (int i = 0; i < charList.size(); i++) {
        printImg(charList[i]);
        printf("\n\n\n");
    }

    int i = 0;
    vector<double> inputList = vector<double>(charList[i].w * charList[i].h);
    for (int row = 0; row < charList[i].h; row++){
        for (int col = 0; col < charList[i].w; col++){
            inputList[col + row * charList[i].w] = charList[i].pixels[row][col];
        }
    }

    printf("\n\n\ndone");
    CharacterRecognition cr;
    cr.loadInputLayer(inputList);
    cr.readFile("Weight.txt");
    cr.calc();
    printf("result: %c\n", cr.result());

    cr.calcDerivative('3');
    cr.backPropagation(0.1);
    cr.restart();
    cr.calc();
    printf("AftResult : %c\n", cr.result());
    printf("sig: %f\n", cr.sigmoid(65));
    printf("%f", exp(65));
//    cr.writeFile("Weight.txt");
//    printf("number: %.6f", cr.parseDouble("-69420.114514"));
    return 0;
}
/**/