#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("avx,avx2,sse,sse2,sse3,sse4")
#include<set>
#include<map>
#include<cmath>
#include<stack>
#include<queue>
#include<cstdio>
#include<cstdlib>
#include<bitset>
#include<string>
#include<vector>
#include<random>
#include<complex>
#include<cstring>
#include<cassert>
#include<utility>
#include<iostream>
#include<algorithm>
#define minsize 15
#define MAXN 100010
#define MAXN2 305
#define pi 3.1415926535897932384626433832
#define inf 0x3f3f3f3f
#define eps 1e-6
using namespace std;
int start=clock();
char font[][66][39]=
{
    {"",
    "...........########",
    ".........############",
    ".......################",
    "......##################",
    ".....####################",
    "....######################",
    "...########################",
    "...##########....##########",
    "..#########........#########",
    "..########..........########",
    ".#########..........#########",
    ".########............########",
    ".########............########",
    ".########............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    "########..............########",
    ".########............########",
    ".########............########",
    ".########............########",
    ".#########..........#########",
    "..########..........########",
    "..#########........#########",
    "...##########....##########",
    "...########################",
    "....######################",
    ".....####################",
    "......##################",
    ".......################",
    ".........############",
    "...........########"},
 
    {"",
    ".............####",
    "...........#######",
    "........##########",
    ".....#############",
    "..################",
    ".#################",
    ".#################",
    ".#################",
    ".#################",
    "..######..########",
    "..###.....########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    "..........########",
    ".##########################",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    ".##########################"},
 
    {"",
    ".........#########",
    "......##############",
    "...###################",
    "..#####################",
    ".#######################",
    ".#######################",
    ".########################",
    ".#########......#########",
    ".#######.........#########",
    ".#######..........########",
    ".#######..........########",
    ".#######..........########",
    ".#######..........########",
    "..######..........########",
    ".................#########",
    ".................########",
    "................#########",
    "...............##########",
    "..............##########",
    ".............###########",
    "............###########",
    "...........###########",
    "..........###########",
    ".........###########",
    "........###########",
    ".......###########",
    "......###########.....#####",
    ".....###########.....#######",
    "....###########......#######",
    "...###########.......#######",
    "..###########........#######",
    ".###########.........#######",
    "############################",
    "############################",
    "############################",
    "############################",
    "############################",
    ".###########################"},
 
    {"",
    ".........##########",
    ".....################",
    "...####################",
    "..######################",
    "..#######################",
    "..########################",
    "..########################",
    "..########.......##########",
    "..#######.........#########",
    "..#######..........########",
    "..#######..........########",
    "...######..........########",
    "...................########",
    "...................########",
    "..................########",
    ".................#########",
    "..........###############",
    ".........###############",
    ".........##############",
    ".........###############",
    ".........################",
    "..........################",
    ".................##########",
    "...................########",
    "...................#########",
    "....................########",
    "....................########",
    "....................########",
    "....................########",
    "...................#########",
    "..###.............##########",
    ".########........##########",
    ".##########################",
    ".#########################",
    "##########################",
    ".########################",
    ".######################",
    "....#################",
    ".......###########"},
 
    {"",
    ".................#####",
    "................#######",
    "...............########",
    "..............#########",
    ".............##########",
    "............###########",
    "............###########",
    "...........############",
    "..........#############",
    ".........##############",
    "........###############",
    ".......################",
    ".......########.#######",
    "......########..#######",
    ".....########...#######",
    "....########....#######",
    "...#########....#######",
    "...########.....#######",
    "..########......#######",
    ".########.......#######",
    "##############################",
    "##############################",
    "##############################",
    "##############################",
    "##############################",
    "##############################",
    "...............########",
    "...............########",
    "...............########",
    "...............########",
    "...............########",
    "...............########",
    ".........####################",
    "........#####################",
    "........#####################",
    "........#####################",
    "........#####################",
    ".........####################"},
 
    {"",
    "...######################",
    "...#######################",
    "...#######################",
    "...#######################",
    "...#######################",
    "...######################",
    "...#######",
    "...#######",
    "...#######",
    "...#######",
    "...#######",
    "...#######",
    "..########..########",
    "..####################",
    "..######################",
    "..#######################",
    "..########################",
    "..########################",
    "..#########################",
    "..########.......##########",
    ".....##...........#########",
    "...................#########",
    "....................########",
    "....................########",
    "....................########",
    "....................########",
    "....................########",
    "....................########",
    "...#...............#########",
    "..####............#########",
    ".########.......###########",
    ".##########################",
    ".#########################",
    "#########################",
    ".#######################",
    "..#####################",
    "....#################",
    "........##########"},
 
    {"",
    "....................######",
    "...............###########",
    "............###############",
    "..........#################",
    "........###################",
    ".......####################",
    "......####################",
    ".....################",
    "....############",
    "...###########",
    "...#########",
    "..#########",
    "..########",
    ".########",
    ".########",
    ".#######....########",
    ".#######..#############",
    "#########################",
    "##########################",
    "###########################",
    "###########################",
    "############......##########",
    "##########.........#########",
    "#########...........#########",
    "########.............########",
    "########.............########",
    "########.............########",
    ".#######.............########",
    ".#######.............########",
    ".########...........#########",
    ".#########.........#########",
    "..##########.....###########",
    "...#########################",
    "...########################",
    "....######################",
    ".....####################",
    "......##################",
    "........##############",
    "...........########"},
 
    {"",
    "###########################",
    "############################",
    "############################",
    "############################",
    "############################",
    "###########################",
    "#######...........#########",
    "#######...........#########",
    "#######..........#########",
    "#######..........#########",
    "#######..........########",
    "#######.........#########",
    "#######.........########",
    "#######........#########",
    ".#####.........#########",
    "...............########",
    "..............#########",
    "..............########",
    ".............#########",
    ".............########",
    "............#########",
    "............#########",
    "............########",
    "...........#########",
    "...........########",
    "..........#########",
    "..........########",
    "..........########",
    ".........########",
    ".........########",
    "........#########",
    "........########",
    "........########",
    ".......########",
    ".......########",
    ".......#######",
    ".......#######",
    ".........#####"},
 
    {"",
    "..........#########",
    "........#############",
    "......#################",
    ".....###################",
    "....#####################",
    "...#######################",
    "...#######################",
    "...#########.....#########",
    "..#########.......#########",
    "..########.........########",
    "..########.........########",
    "..########.........########",
    "..########.........########",
    "..########.........########",
    "...########.......########",
    "...#########.....#########",
    "....#####################",
    ".....###################",
    "......#################",
    "......#################",
    "....#####################",
    "...#######################",
    "..#########......##########",
    ".########..........########",
    ".########..........#########",
    "########............########",
    "########............########",
    "########............########",
    "########............########",
    "#########..........#########",
    "#########..........#########",
    ".##########......##########",
    ".##########################",
    "..########################",
    "..########################",
    "...######################",
    "....####################",
    "......################",
    ".........##########"},
 
    {"",
    ".........#########",
    ".......#############",
    ".....#################",
    "....###################",
    "...#####################",
    "..#######################",
    ".########################",
    ".##########......#########",
    ".#########........#########",
    "#########..........########",
    "########............#######",
    "########............#######",
    "########............########",
    "########............########",
    "########............########",
    "#########..........#########",
    ".########.........##########",
    ".##########......###########",
    "..##########################",
    "..##########################",
    "...#########################",
    "....########################",
    "......############..########",
    "........########....#######",
    "....................#######",
    "...................########",
    "...................########",
    "..................########",
    ".................#########",
    "...............##########",
    ".............############",
    ".........###############",
    "....###################",
    "...###################",
    "...##################",
    "...################",
    "...##############",
    "...############",
    "....######"},
 
    {"",
    "..####",
    ".######",
    "#########",
    "##########",
    "###########",
    "############",
    ".############",
    "...###########",
    "....###########",
    ".....##########",
    "......##########",
    ".......##########",
    "........#########",
    ".........#########",
    "..........########",
    "..........#########",
    "...........########",
    "...........#########",
    "............########",
    "............########",
    "............########",
    "............#########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    ".............########",
    "............########",
    "............########",
    "............########",
    "...........#########",
    "...........########",
    "..........#########",
    "..........#########",
    ".........#########",
    "........##########",
    ".......##########",
    ".......#########",
    ".....###########",
    "....###########",
    "...###########",
    "..###########",
    "############",
    "###########",
    "##########",
    "#########",
    ".#######",
    "..####",
    "...#"},
 
    {"",
    "......................####",
    "......................######",
    ".....................#######",
    ".....................#######",
    "....................########",
    "....................#######",
    "...................########",
    "...................#######",
    "..................########",
    "..................#######",
    ".................########",
    ".................#######",
    "................########",
    "................########",
    "................#######",
    "...............########",
    "...............#######",
    "..............########",
    "..............#######",
    ".............########",
    ".............#######",
    "............########",
    "............#######",
    "...........########",
    "...........#######",
    "..........########",
    "..........#######",
    "..........#######",
    ".........########",
    ".........#######",
    "........########",
    "........#######",
    ".......########",
    ".......#######",
    "......########",
    "......#######",
    ".....########",
    ".....#######",
    "....########",
    "....#######",
    "...########",
    "...########",
    "...#######",
    "..########",
    "..#######",
    ".########",
    ".#######",
    "########",
    "#######",
    ".######",
    "..#####"},
 
    {"",
    ".##########################",
    "############################",
    "############################",
    "############################",
    "############################",
    "############################",
    ".###########################"},
 
    {"",
    "...............####",
    "..............######",
    "............########",
    "...........##########",
    "..........###########",
    ".........############",
    "........############",
    ".......###########",
    "......###########",
    ".....###########",
    ".....##########",
    "....##########",
    "....#########",
    "...#########",
    "...########",
    "..#########",
    "..########",
    ".#########",
    ".########",
    ".########",
    ".########",
    "#########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    "########",
    ".########",
    ".########",
    ".########",
    ".#########",
    "..########",
    "..#########",
    "..#########",
    "...#########",
    "...##########",
    "....#########",
    ".....#########",
    ".....##########",
    "......###########",
    ".......###########",
    "........###########",
    ".........############",
    "..........###########",
    "...........##########",
    "............#########",
    ".............#######",
    "...............####",
    ".................#"},
 
    {"",
    "...........#####",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    "###########################",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "..........#######",
    "...........#####"},
 
    {"",
    "...........####",
    "..........######",
    "..........#######",
    ".........########",
    ".........########",
    "..........#######",
    "..........######",
    ".#####....######.....####",
    ".######...######...#######",
    "#########..#####.#########",
    "###############.##########",
    "##########################",
    "##########################",
    ".########################",
    "......##############",
    ".........########",
    "........###########",
    ".......#############",
    ".....########.#######",
    "....########..########",
    "....########..#########",
    "...########....########",
    "...########....########",
    "....#######.....#######",
    ".....#####......######",
    "......###.........##"}
};
int t,w,b;
struct Image{
    vector<vector<int> > vec;
    int h,w;
    int x;
    Image(){
        vec.clear();
        h=w=0;
    }
    Image(int x,int y){
        for(int i=0;i<x;i++){
            vector<int> temp;
            temp.clear();
            for(int j=0;j<y;j++){
                temp.push_back(0);
            }
            vec.push_back(temp);
        }
        h=x;
        w=y;
    }
    void build(vector<string> input){
        vec.clear();
        vector<int> temp;
        for(string str:input){
            for(char i:str){
                if(i=='#'){
                    temp.emplace_back(1);
                }else{
                    temp.emplace_back(0);
                }
            }
            vec.push_back(temp);
            temp.clear();
        }
        h=vec.size();
        w=vec[0].size();
    }
    void print(){
        for(int i=0;i<vec.size();i++){
            for(int j=0;j<vec[i].size();j++){
                if(vec[i][j]==1){
                    printf("#");
                }else{
                    printf(".");
                }
            }
            printf("\n");
        }
        printf("\n");
    }
};
inline void copy(Image &to_be_copied,Image to_copy){
    int x_size=to_copy.vec.size();
    int y_size=to_copy.vec[0].size();
    to_be_copied.vec.clear();
    for(int i=0;i<x_size;i++){
        vector<int> temp;
        for(int j=0;j<y_size;j++){
            temp.emplace_back(to_copy.vec[i][j]);
        }
        to_be_copied.vec.emplace_back(temp);
    }
}
inline void medium_reduce_noise(Image &input){
    //reduce noise
    Image temp=Image();
    copy(temp,input);
    int x=input.vec.size();
    int y=input.vec[0].size();
    int arr[9];
    for(int i=1;i<x-1;i++){
        for(int j=1;j<y-1;j++){
            arr[0]=input.vec[i][j];
            arr[1]=input.vec[i-1][j];
            arr[2]=input.vec[i][j+1];
            arr[3]=input.vec[i+1][j];
            arr[4]=input.vec[i][j-1];
            arr[5]=input.vec[i-1][j-1];
            arr[6]=input.vec[i+1][j-1];
            arr[7]=input.vec[i-1][j+1];
            arr[8]=input.vec[i+1][j+1];
            sort(arr,arr+8);
            temp.vec[i][j]=((double)arr[0]*0.153661872618337+arr[1]*0.202700255591144+arr[2]*0.0886373360771073+arr[3]*0.0725557944480514+arr[4]*0.0730594954560799+arr[5]*0.110144307001566+arr[6]*0.0858114972662411+arr[7]*0.148150899571762+arr[8]*0.156203242695401)>0.525;
            // temp.vec[i][j]=((double)arr[4]*0.7+arr[3]*0.18+arr[5]*0.11+arr[2]*0.01)>0.86;
            // temp.vec[i][j]=arr[4];
        }
    }
    for(int i=1;i<x-1;i++){
        temp.vec[i][0]=(temp.vec[i][0]+temp.vec[i+1][0]+temp.vec[i-1][0]+temp.vec[i][1])/4;
        temp.vec[i][y-1]=(temp.vec[i][y-1]+temp.vec[i+1][y-1]+temp.vec[i-1][y-1]+temp.vec[i][y-2])/4;
    }
    for(int j=1;j<y-1;j++){
        temp.vec[0][j]=(temp.vec[0][j]+temp.vec[0][j+1]+temp.vec[0][j-1]+temp.vec[1][j])/4;
        temp.vec[x-1][j]=(temp.vec[x-1][j]+temp.vec[x-1][j+1]+temp.vec[x-1][j-1]+temp.vec[x-2][j])/4;
    }
    copy(input,temp);
    // return temp;
}
bool vis[MAXN2][9005];
int maxx[MAXN2];
int minx[MAXN2];
int maxy[MAXN2];
int miny[MAXN2];
int cnt2=0;
int dx[4]={-1,0,1,0};
int dy[4]={0,1,0,-1};
inline void dfs2(int x,int y,Image im){
    if(x>=im.vec.size()||x<0||y>=im.vec[0].size()||y<0){
        return;
    }
    if(im.vec[x][y]==0){
        return;
    }
    maxx[cnt2]=max(maxx[cnt2],x);
    minx[cnt2]=min(minx[cnt2],x);
    maxy[cnt2]=max(maxy[cnt2],y);
    miny[cnt2]=min(miny[cnt2],y);
    if(vis[x][y]){
        return;
    }
    vis[x][y]=true;
    for(int i=0;i<4;i++){
        int newx=x+dx[i];
        int newy=y+dy[i];
        if(newx>=im.vec.size()||newx<0||newy>=im.vec[0].size()||newy<0){
            continue;
        }
        if(!vis[newx][newy]&&im.vec[newx][newy]==1){
            dfs2(newx,newy,im);
        }
    }
}
inline void dfs(Image im){
    cnt2=0;
    // im.print();
    for(int i=0;i<im.vec.size();i++){
        for(int j=0;j<im.vec[i].size();j++){
            // printf("%d %d %d\n",i,j,vis[i][j]);
            if(!vis[i][j]&&im.vec[i][j]==1){
                cnt2++;
                // printf("%d %d\n",i,j);
                dfs2(i,j,im);
            }
        }
    }
}
inline vector<Image> split(Image input){
    cnt2=0;
    memset(vis,0,sizeof(vis));
    vector<Image> res;
    for(int i=0;i<MAXN2;i++){
        minx[i]=miny[i]=inf;
        maxx[i]=maxy[i]=0;
    }
    dfs(input);
    // printf("cnt2: %d\n",cnt2);
    for(int i=1;i<=cnt2;i++){
        if(maxx[i]-minx[i]<=minsize&&maxy[i]-miny[i]<=minsize){
            // printf("%d\n",i);
            continue;
        }
        Image temp2(maxx[i]-minx[i]+1,maxy[i]-miny[i]+1);
        temp2.x=miny[i];
        // res.push_back(Image(maxx[i]-minx[i]+1,maxy[i]-miny[i]+1));
        for(int x=minx[i];x<=maxx[i];x++){
            for(int y=miny[i];y<=maxy[i];y++){
                // printf("%d\n",temp.vec[x-minx[i]][y-miny[i]]);
                temp2.vec[x-minx[i]][y-miny[i]]=input.vec[x][y];
            }
        }
        res.emplace_back(temp2);
        // printf("%d %d %d %d\n",maxx[i],minx[i],maxy[i],miny[i]);
    }
    // res.push_back(input);
    // assert(res.size()!=0);
    return res;
}
inline Image stretching(Image input,int newx,int newy){
    Image res(newx,newy);
    for(int i=0;i<newx;i++){
        for(int j=0;j<newy;j++){
            res.vec[i][j]=input.vec[input.h*i/newx][input.w*j/newy];
        }
    }
    return res;
    // vector<Image> aa;
    // aa=split(res);
    // return aa[0];
    // return split(res)[0];
}
inline Image distort(Image input,double sx,double sy){
    Image res(input.vec.size()*3,input.vec[0].size()*3);
    for(int i=0;i<input.h;i++){
        for(int j=0;j<input.w;j++){
            // if(input.vec[i][j]){
            //     aaaa++;
            // }
            res.vec[(int)(i+sy*j)+input.h][(int)(j+sx*i)+input.w]=input.vec[i][j];
        }
    }
    // return res;
    vector<Image> aa;
    aa=split(res);
    return aa[0];
    // return split(res)[0];
}
inline Image rotate(Image input,double angle){
    if(abs(angle)<=eps){
        return input;
    }
    int newL=max(input.vec.size(),input.vec[0].size());
    angle=angle*pi/180;
    Image res(newL*2,newL*2);
    for(int i=1;i<=input.h;i++){
        for(int j=1;j<=input.w;j++){
            // if(i-1>=input.vec.size()||j-1>=input.vec[0].size()){
            //     printf("%d %d\n",i,j);
            //     printf("range: %d %d\n",input.vec.size(),input.vec[0].size());
            //     continue;
            // }
            if(input.vec[i-1][j-1]){
                double p=atan((double)j/i);
                double delta=p-angle;
                double len=sqrt(i*i+j*j);
                res.vec[(int)(len*cos(delta)+0.4)+(newL)][(int)(len*sin(delta)+0.4)+(newL)]=1;
            }
        }
    }
    // res.print();
    vector<Image> aa;
    aa=split(res);
    return aa[0];
    // return split(res)[0];
}
inline double compare(Image x,Image y){
    if(x.h<0.65*y.h||x.h*0.65>y.h||x.w<0.65*y.w||x.w*0.65>y.w){
        return 0; //if size too different then cannot match
    }
    Image newx=stretching(x,y.vec.size(),y.vec[0].size());
    int cntsame=0;
    for(int i=0;i<y.vec.size();i++){
        for(int j=0;j<y.vec[0].size();j++){
            cntsame+=(newx.vec[i][j]==y.vec[i][j]);
        }
    }
    return ((double)cntsame/(y.h*y.w));
}
Image realfont[16][41];
inline void prework(){
    double Mmin = 0.9, Mmax=1,Rmin,Rmax,Smin,Smax;
	if(0<=t&&t<30){
		Rmin=-2,Rmax=2,Smin=Smax=0;
	}else if(30<=t&&t<90){
		Rmin=-10,Rmax = 10, Smin=-0.1,Smax=0.1;
	}else{
		Rmin=-15,Rmax=15,Smin=-0.1,Smax=0.1;
	}
	uniform_real_distribution<> M(Mmin, Mmax), R(Rmin, Rmax), S(Smin, Smax);
	default_random_engine gen(time(NULL));
    for(int i=0;i<16;i++){
        Image temp(66,39);
        for(int x=0;x<66;x++){
            for(int y=0;y<39;y++){
                temp.vec[x][y]=(font[i][x][y]=='#');
            }
        }
        vector<Image> vec2;
        vec2=split(temp);
        realfont[i][0]=vec2[0];
        // realfont[i][0]=temp;
        for(int j=1;j<=7;j+=3){
            Image temp2;
            temp2=stretching(temp,66*M(gen),39*M(gen));
            realfont[i][j]=temp2;
            temp2=rotate(temp2,R(gen));
            realfont[i][j+1]=temp2;
            temp2=distort(temp2,S(gen),S(gen));
            realfont[i][j+2]=temp2;
            // temp2.print();
        }
    }
}
struct which{
    int x,id;
};
which in[MAXN2];
inline bool cmp(which a,which b){
    return a.x<b.x;
}
string expr="";
const string table="0123456789)/-(+*";
inline double match(int x,Image img){
    double res=0;
    for(int i=0;i<=9;i++){
        res=max(res,compare(realfont[x][i],img));
    }
    // printf("%d %lf\n",x,res);
    return res;
}
inline void process(Image im){
    double maxx=-1.0;
    double temp;
    int id=0;
    for(int i=0;i<=15;i++){
        temp=match(i,im);
        if(temp>maxx){
            id=i;
            maxx=temp;
        }
    }
    expr+=table[id];
}
inline void read(char &ch){
    scanf("%c",&ch);
}
void work(){
    vector<string> vec;
    string str;
    char ch;
    prework();
    // realfont[8][0].print();
    for(int i=1;i<=b;i++){
        str="";
        for(int j=1;j<=w;j++){
            read(ch);
            str+=ch;
            // printf("%d %c\n",j,ch);
        }
        scanf("\n");
        vec.push_back(str);
        // putchar('\n');
    }
    // printf("%d\n",1);
    Image im;
    im.build(vec);
    // im.print();
    medium_reduce_noise(im);
    medium_reduce_noise(im);
    // medium_reduce_noise(im);
    // medium_reduce_noise(im);
    // im.print();
    vector<Image> splitted=split(im);
    int len=splitted.size();
    for(int i=1;i<=len;i++){
        in[i].x=splitted[i-1].x;
        in[i].id=i-1;
    }
    // splitted[3].print();
    // printf("1\n");
    sort(in+1,in+len+1,cmp);
    // process(splitted[0]);
    for(int i=1;i<=len;i++){
        // printf("%d\n",in[i].id);
        // printf("y coor: %d\n",splitted[in[i].id].x);
        // splitted[in[i].id].print();
        process(splitted[in[i].id]);
    }
    // printf("2\n");
    // for(char i:expr){
    //     putchar(i);
    //     putchar(' ');
    // }
    // putchar('\n');
    // printf("%d\n",splitted.size());
    // splitted[0].print();
}
stack<int> data, op;
stack<int> num,data2;
int precedence(char c){
    if(c=='+'||c=='-'){
        return 1;
    }
    if(c=='*'||c=='/'){
        return 2;
    }
    return 0;
}
int applyOp(int x,int y,char c){
    if(c=='+'){
        return x+y;
    }
    if(c=='-'){
        return x-y;
    }
    if(c=='*'){
        return x*y;
    }
    if(c=='/'){
        return x/y;
    }
    return -1;
}
int evaluate(string tokens){
    int i;
    stack<int> values;
    stack<char> ops;
    for(i = 0; i < tokens.length(); i++){
        if(tokens[i] == '('){
            ops.push(tokens[i]);
        }
        else if(isdigit(tokens[i])){
            int val = 0;
            while(i<tokens.length()&&isdigit(tokens[i])){
                val = (val*10) + (tokens[i]-'0');
                i++;
            }
            values.push(val);
            i--;
        }else if(tokens[i] == ')'){
            while(!ops.empty() && ops.top() != '('){
                int val2 = values.top();
                values.pop();
                int val1 = values.top();
                values.pop();
                char op = ops.top();
                ops.pop();
                values.push(applyOp(val1, val2, op));
            }
            if(!ops.empty()){
                ops.pop();
            }
        }else{
            while(!ops.empty() && precedence(ops.top())>= precedence(tokens[i])){
                int val2 = values.top();
                values.pop();
                int val1 = values.top();
                values.pop();
                char op = ops.top();
                ops.pop();
                values.push(applyOp(val1, val2, op));
            }
            ops.push(tokens[i]);
        }
    }
    while(!ops.empty()){
        int val2 = values.top();
        values.pop();
        int val1 = values.top();
        values.pop();
        char op = ops.top();
        ops.pop();
        values.push(applyOp(val1, val2, op));
    }
    return values.top();
}
int main(){
    freopen("AT678_input.txt","r",stdin);
    freopen("AT678_output.txt","w",stdout);
    scanf("%d%d%d\n",&t,&w,&b);
    // printf("%d \n%d %d\n",t,w,b);
    // printf("b4 work function");
    work();
    printf("%d\n",evaluate(expr));
    // printf("%d\n",clock()-start);
    // printf("%d\n",CLOCKS_PER_SEC);
    // printf("after work function\n");
    return 0;
}